syntax = "proto3";

package nexus;

import "nnquery.proto";

message ControlMessage {
  oneof message {
    // Frontend/Backend <- Dispatcher
    RegisterReply register_reply = 11;
    RpcReply unregister_reply = 12;
    CheckAliveRequest check_alive = 13;

    // Dispatcher <- Frontend/Backend
    RegisterRequest register_request = 14;
    UnregisterRequest unregister_request = 15;
    KeepAliveRequest inform_alive = 16;

    // Dispatcher <- Frontend
    LoadModelRequest add_model = 17;
    DispatchRequest dispatch = 18;

    // Frontend <- Dispatcher
    LoadModelReply add_model_reply = 19;
    BackendListUpdates update_backend_list = 20;
    DispatchReply dispatch_reply = 21;

    // Dispatcher <- Backend
    RpcReply load_model_reply = 22;
    RpcReply enqueue_query_reply = 23;
    RpcReply enqueue_batchplan_reply = 24;

    // Backend <- Dispatcher
    BackendLoadModelCommand load_model = 25;
    BatchPlanProto enqueue_batchplan = 27;

    // Frontend <- Backend
    QueryResultProto query_result = 28;

    // Backend <- Frontend
    TellNodeIdMessage tell_node_id = 29;
  }
}

enum NodeType {
  UNKNOWN_NODE = 0;
  FRONTEND_NODE = 1;
  BACKEND_NODE = 2;
  DISPATCHER_NODE = 3;
}

enum CtrlStatus {
  CTRL_OK = 0;

  // User facing error code
  // Service unavailable
  SERVICE_UNAVAILABLE = 1;
  // Model not found
  MODEL_NOT_FOUND = 2;
  // No available backends
  NOT_ENOUGH_BACKENDS = 3;
  // Model session not loaded
  MODEL_SESSION_NOT_LOADED = 4;
  // Invalid query
  MODEL_TYPE_NOT_SUPPORT = 5;
  // Input type incorrect
  INPUT_TYPE_INCORRECT = 6;
  // Latency SLA timeout
  TIMEOUT = 7;

  // Internal control error code
  CTRL_SERVER_UNREACHABLE = 100;
  CTRL_SERVER_NOT_REGISTERED = 101;
  CTRL_MODEL_NOT_SUPPORTED = 102;
  CTRL_ROUTE_TABLE_VERSION_MISMATCH = 103;
  CTRL_IMAGE_NOT_FOUND = 104;
  CTRL_FRONTEND_CONNECTION_NOT_FOUND = 105;
  CTRL_GLOBAL_ID_CONFLICT = 106;
  CTRL_DISPATCHER_DROPPED_QUERY = 107;
  CTRL_BACKEND_DROPPED_QUERY = 108;

  CTRL_BACKEND_NODE_ID_CONFLICT = 200;

  CTRL_FRONTEND_NODE_ID_CONFLICT = 300;
  CTRL_INVALID_LOAD_MODEL_REQUEST = 301;

  CTRL_UNSPECIFIED_ERROR = 400;
}

message RpcReply {
  CtrlStatus status = 1;
}

message RegisterRequest {
  message GpuInfo {
    uint32 gpu_idx = 1;
    string gpu_device_name = 2;
    string gpu_uuid = 3;
    uint64 gpu_available_memory = 4;
  }

  NodeType node_type = 1;
  uint32 node_id = 2;
  uint32 port = 3;
  repeated GpuInfo gpus = 4;
}

message RegisterReply {
  // reply whether the rpc succeeds
  CtrlStatus status = 1;
  // beacon interval in sec
  int32 beacon_interval_sec = 2;
}

message UnregisterRequest {
  NodeType node_type = 1;
  uint32 node_id = 2;
}

message CheckAliveRequest {
  NodeType node_type = 1;
  uint32 node_id = 2;
}

message BackendInfo {
  uint32 node_id = 1;
  string ip = 2;
  uint32 port = 5;
}

message BackendListUpdates {
  repeated BackendInfo backends = 1;
}

message LoadModelRequest {
  uint32 node_id = 1;
  ModelSession model_session = 2;
  double estimate_workload = 3;
  //uint32 num_gpus = 4;
  string cq_id = 5;
}

message LoadModelReply {
  CtrlStatus status = 1;
  uint32 model_worker_port = 2;
  uint32 model_index = 3;
}

message ModelInstanceConfig {
  repeated ModelSession model_session = 1;
  uint32 batch = 2;
  uint32 max_batch = 3;
  uint64 memory_usage = 4;
  bool backup = 5;

  // The following fields are used for prefix batching and split batching.
  // Model segment is from start_index (inclusive) to end_index (exclusive).
  // input_name and input_shape are needed when start_index is not 0.
  int32 start_index = 10;
  int32 end_index = 11;
  string input_name = 12;
  repeated int32 input_shape = 13;

  repeated BackendInfo backup_backend = 40;
}

message ModelStatsProto {
  // Model session ID
  string model_session_id = 1;
  // Requests every second during last period
  repeated uint64 num_requests = 2;
}

message KeepAliveRequest {
  NodeType node_type = 1;
  uint32 node_id = 2;
}

message DispatchRequest {
  uint32 model_index = 1;
  uint64 query_id = 2;
  QueryProto query_without_input = 4;
  uint64 rdma_read_offset = 5;
  uint64 rdma_read_length = 6;
}

message DispatchReply {
  message QueryReply {
    uint64 query_id = 1;
    QueryPunchClock clock = 2;
  }

  uint32 model_index = 1;
  repeated QueryReply query_list = 2;
  CtrlStatus status = 3;
}

message BackendLoadModelCommand {
  uint32 gpu_idx = 4;
  ModelSession model_session = 1;
  uint32 max_batch = 2;
  uint32 model_index = 3;
}

message TellNodeIdMessage {
  uint32 node_id = 1;
}

message BatchPlanProto {
  message QueryInfo {
    QueryProto query_without_input = 1;
    uint64 rdma_read_offset = 2;
    uint64 rdma_read_length = 3;
  }

  uint64 plan_id = 1;
  uint32 model_index = 2;
  uint32 gpu_idx = 7;
  repeated QueryInfo queries = 3;
  int64 exec_time_ns = 4;
  int64 deadline_ns = 5;
  int64 expected_finish_time_ns = 6;
}
